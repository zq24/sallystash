/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.sallysstash;

import edu.duke.ece651.sallysstash.zq24.*;
import org.junit.jupiter.api.Test;

import java.io.*;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test
    void cellClassTest() {
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outContent));
        Cell cell = new Cell();
        assertEquals(cell.getContent(), ' ');
        cell.setContent('G');
        cell.display();
        assertEquals("G", outContent.toString());
    }

    @Test
    void BoardClassTest() {
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outContent));
        Board board = new Board();
        assertEquals(20, board.getActualBoard().length);
        assertEquals(20, board.getHitMissBoard().length);

        board.printBoard();
        String expectedOutput = "------------------------\n" +
                "  0|1|2|3|4|5|6|7|8|9   \n" +
                "A  | | | | | | | | |  A \n" +
                "B  | | | | | | | | |  B \n" +
                "C  | | | | | | | | |  C \n" +
                "D  | | | | | | | | |  D \n" +
                "E  | | | | | | | | |  E \n" +
                "F  | | | | | | | | |  F \n" +
                "G  | | | | | | | | |  G \n" +
                "H  | | | | | | | | |  H \n" +
                "I  | | | | | | | | |  I \n" +
                "J  | | | | | | | | |  J \n" +
                "K  | | | | | | | | |  K \n" +
                "L  | | | | | | | | |  L \n" +
                "M  | | | | | | | | |  M \n" +
                "N  | | | | | | | | |  N \n" +
                "O  | | | | | | | | |  O \n" +
                "P  | | | | | | | | |  P \n" +
                "Q  | | | | | | | | |  Q \n" +
                "R  | | | | | | | | |  R \n" +
                "S  | | | | | | | | |  S \n" +
                "T  | | | | | | | | |  T \n" +
                "  0|1|2|3|4|5|6|7|8|9   \n" +
                "------------------------\n\n";
        assertEquals(expectedOutput, outContent.toString());
        outContent.reset();

        board.printAllBoard("Player A", "Player B");
        String expectedOutputForAllBoard = "----------------------------------------------------------------\n" +
                "Player A's turn:\n" +
        "  Your tree                             Player B's tree\n" +
        "  0|1|2|3|4|5|6|7|8|9                     0|1|2|3|4|5|6|7|8|9   \n" +
        "A  | | | | | | | | |  A                 A  | | | | | | | | |  A \n" +
        "B  | | | | | | | | |  B                 B  | | | | | | | | |  B \n" +
        "C  | | | | | | | | |  C                 C  | | | | | | | | |  C \n" +
        "D  | | | | | | | | |  D                 D  | | | | | | | | |  D \n" +
        "E  | | | | | | | | |  E                 E  | | | | | | | | |  E \n" +
        "F  | | | | | | | | |  F                 F  | | | | | | | | |  F \n" +
        "G  | | | | | | | | |  G                 G  | | | | | | | | |  G \n" +
        "H  | | | | | | | | |  H                 H  | | | | | | | | |  H \n" +
        "I  | | | | | | | | |  I                 I  | | | | | | | | |  I \n" +
        "J  | | | | | | | | |  J                 J  | | | | | | | | |  J \n" +
        "K  | | | | | | | | |  K                 K  | | | | | | | | |  K \n" +
        "L  | | | | | | | | |  L                 L  | | | | | | | | |  L \n" +
        "M  | | | | | | | | |  M                 M  | | | | | | | | |  M \n" +
        "N  | | | | | | | | |  N                 N  | | | | | | | | |  N \n" +
        "O  | | | | | | | | |  O                 O  | | | | | | | | |  O \n" +
        "P  | | | | | | | | |  P                 P  | | | | | | | | |  P \n" +
        "Q  | | | | | | | | |  Q                 Q  | | | | | | | | |  Q \n" +
        "R  | | | | | | | | |  R                 R  | | | | | | | | |  R \n" +
        "S  | | | | | | | | |  S                 S  | | | | | | | | |  S \n" +
        "T  | | | | | | | | |  T                 T  | | | | | | | | |  T \n" +
        "  0|1|2|3|4|5|6|7|8|9                     0|1|2|3|4|5|6|7|8|9   \n" +
                "----------------------------------------------------------------\n\n";
        assertEquals(expectedOutputForAllBoard, outContent.toString());
    }

    @Test
    void shapeAbstractClassTest() {
        Shape horizontalRectangle = new Rectangle(0, 0, "Green", 'h', 1, 2);
        horizontalRectangle.generateShape();
        assertTrue(horizontalRectangle.verifyShape());
        horizontalRectangle.encodeCoordinates();
        assertEquals("0 0", horizontalRectangle.getShapeInString().get(0));
        Shape verticalRectangle = new Rectangle(20, 0, "Green", 'v', 1, 2);
        verticalRectangle.generateShape();
        assertFalse(verticalRectangle.verifyShape());
    }

    @Test
    void playerClassTest() {
        Player player = new Player("Player A", "Player B");
        assertEquals("Player A", player.getName());
        assertEquals("Player B", player.getOpponentName());
        assertEquals(20, player.getBoard().getActualBoard().length);
        assertEquals(0, player.getAllStashes().size());
        assertEquals(0, player.getCoordinatesOfAllShapesInString().size());
        assertEquals(0, player.getAllStashesInfo().size());
    }

    @Test
    void driverClassTest() {
        final InputStream original = System.in;
        FileInputStream test = null;
        try {
            test = new FileInputStream(new File("test.txt"));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        System.setIn(test);
        Driver.main(null);
        System.setIn(original);
    }

    @Test
    void driverClassComputerTest() {
        final InputStream original = System.in;
        FileInputStream testComputer = null;
        try {
            testComputer = new FileInputStream(new File("computer.txt"));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        System.setIn(testComputer);
        Driver.main(null);
        System.setIn(original);
    }

}
